import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.BeforeAndAfter
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import entity._
import adt._
import java.io.PrintWriter
import java.io.ByteArrayOutputStream

@RunWith(classOf[JUnitRunner])
class GraphVizTests extends FunSuite with BeforeAndAfter with ShouldMatchers {
  var fleet:Fleet = _
  var c1, c2, p1, p2: Location = _
  var c1_p1, p1_c1, p2_p1, p1_p2, c2_p2, p2_c2: Segment = _
  
  before {
    fleet = new Fleet
    c1 = Location(fleet, "c1", CUST)
    c2 = Location(fleet, "c2", CUST)
    p1 = Location(fleet, "p1", PORT)
    p2 = Location(fleet, "p2", PORT)
    
    c1_p1 = Segment(fleet, c1, p1, TRUCK, Length(4))
    p1_c1 = Segment(fleet, p1, c1, TRUCK, Length(4))
    p2_p1 = Segment(fleet, p2, p1, TRUCK, Length(4))
    p1_p2 = Segment(fleet, p1, p2, TRUCK, Length(4))
    c2_p2 = Segment(fleet, c2, p2, TRUCK, Length(4))
    p2_c2 = Segment(fleet, p2, c2, TRUCK, Length(4))    
  }
  
  test("Basic") {
    val buf = new ByteArrayOutputStream
    val f = new PrintWriter(buf)
    fleet.printNetwork(f, true)
    val res = buf.toString().split("\n").toSet
    val golden = """// Auto-generated by the graphviz module!
// Do not make manual edits. They will be overwritten next time run.
// Execute: neato -Tgif FILE.gv -o FILE.gif
digraph G {
location_c1[label="c1" shape=circle]
location_c2[label="c2" shape=circle]
location_p1[label="p1" shape=circle]
location_p2[label="p2" shape=circle]
location_c1 -> location_p1
location_p1 -> location_c1
location_p1 -> location_p2
location_p2 -> location_p1
location_p2 -> location_c2
location_c2 -> location_p2
}""".split("\n").toSet
    res should be (golden)
  }
}